const { Router } = require("express");
const OpenAI = require("openai");
const fetch = require("node-fetch");

const router = Router();

// Initialize OpenAI client - compatible with openai v3.3.0
const client = new OpenAI.OpenAIApi(new OpenAI.Configuration({
    apiKey: process.env.OPENAI_API_KEY
}));

// Check if API key is available
if (!process.env.OPENAI_API_KEY) {
    console.error("‚ùå OPENAI_API_KEY is not set!");
} else {
    console.log("‚úÖ OPENAI_API_KEY is set:", process.env.OPENAI_API_KEY.substring(0, 10) + "...");
}

/**
 * Schema for company website analysis
 */
const schema = {
    type: "object",
    additionalProperties: false,
    properties: {
        companyName: { 
            type: "string", 
            description: "◊©◊ù ◊î◊ó◊ë◊®◊î" 
        },
        about: { 
            type: "string", 
            description: "◊™◊ô◊ê◊ï◊® ◊î◊ó◊ë◊®◊î - ◊û◊ô◊ì◊¢ ◊¢◊ú ◊î◊ó◊ë◊®◊î, ◊™◊ó◊ï◊û◊ô ◊§◊¢◊ô◊ú◊ï◊™, ◊î◊ô◊°◊ò◊ï◊®◊ô◊î" 
        },
        safety: { 
            type: "string", 
            description: "◊û◊ô◊ì◊¢ ◊¢◊ú ◊ë◊ò◊ô◊ó◊ï◊™ - ◊™◊ß◊†◊ô ◊ë◊ò◊ô◊ó◊ï◊™, ◊î◊°◊û◊õ◊ï◊™, ◊™◊¢◊ï◊ì◊ï◊™" 
        },
        projects: { 
            type: "string", 
            description: "◊§◊®◊ï◊ô◊ß◊ò◊ô◊ù - ◊§◊®◊ï◊ô◊ß◊ò◊ô◊ù ◊ë◊ï◊ú◊ò◊ô◊ù, ◊ú◊ß◊ï◊ó◊ï◊™, ◊î◊ô◊©◊í◊ô◊ù" 
        },
        logoUrl: { 
            type: "string", 
            description: "◊õ◊™◊ï◊ë◊™ ◊î◊ú◊ï◊í◊ï ◊©◊ú ◊î◊ó◊ë◊®◊î" 
        }
    },
    required: ["companyName", "about"]
};

/**
 * Build system prompt for company analysis
 */
function buildSystemPrompt() {
    return `◊ê◊™◊î ◊û◊†◊™◊ó ◊ê◊™◊®◊ô ◊ê◊ô◊†◊ò◊®◊†◊ò ◊©◊ú ◊ó◊ë◊®◊ï◊™ ◊ë◊†◊ô◊î ◊ï◊ß◊ë◊ú◊†◊ï◊™. ◊î◊û◊©◊ô◊û◊î: ◊ó◊ô◊ú◊ï◊• ◊û◊ô◊ì◊¢ ◊û◊ï◊ë◊†◊î ◊¢◊ú ◊î◊ó◊ë◊®◊î ◊ú◊§◊ô ◊î◊°◊õ◊ô◊û◊î ◊î◊û◊¶◊ï◊®◊§◊™. ◊î◊™◊û◊ß◊ì ◊ë◊û◊ô◊ì◊¢ ◊¢◊ú ◊î◊ó◊ë◊®◊î, ◊ë◊ò◊ô◊ó◊ï◊™, ◊ï◊§◊®◊ï◊ô◊ß◊ò◊ô◊ù. ◊î◊ó◊ñ◊® JSON ◊ë◊ú◊ë◊ì ◊ú◊ú◊ê ◊î◊°◊ë◊®◊ô◊ù ◊†◊ï◊°◊§◊ô◊ù.`;
}

/**
 * Analyze company website using OpenAI
 */
async function analyzeCompanyWebsite(websiteUrl) {
    try {
        console.log("üîç Analyzing company website:", websiteUrl);
        
        const response = await client.createChatCompletion({
            model: "gpt-4o-mini",
            messages: [
                {
                    role: "system",
                    content: buildSystemPrompt()
                },
                {
                    role: "user",
                    content: `◊†◊™◊ó ◊ê◊™ ◊î◊ê◊™◊® ◊î◊ë◊ê ◊ï◊ó◊ú◊• ◊û◊ô◊ì◊¢ ◊¢◊ú ◊î◊ó◊ë◊®◊î: ${websiteUrl}

◊ó◊ú◊• ◊ê◊™ ◊î◊û◊ô◊ì◊¢ ◊î◊ë◊ê ◊ï◊ó◊ñ◊ï◊® JSON ◊ë◊ú◊ë◊ì:
- companyName: ◊©◊ù ◊î◊ó◊ë◊®◊î
- about: ◊™◊ô◊ê◊ï◊® ◊î◊ó◊ë◊®◊î (◊¢◊ì 500 ◊™◊ï◊ï◊ô◊ù)
- safety: ◊û◊ô◊ì◊¢ ◊¢◊ú ◊ë◊ò◊ô◊ó◊ï◊™ ◊ï◊™◊ß◊†◊ô◊ù (◊¢◊ì 300 ◊™◊ï◊ï◊ô◊ù)
- projects: ◊§◊®◊ï◊ô◊ß◊ò◊ô◊ù ◊ë◊ï◊ú◊ò◊ô◊ù (◊¢◊ì 300 ◊™◊ï◊ï◊ô◊ù)
- logoUrl: ◊õ◊™◊ï◊ë◊™ ◊î◊ú◊ï◊í◊ï ◊ê◊ù ◊†◊û◊¶◊ê

◊î◊ó◊ñ◊® ◊®◊ß JSON ◊ú◊ú◊ê ◊î◊°◊ë◊®◊ô◊ù ◊†◊ï◊°◊§◊ô◊ù.`
                }
            ],
            max_tokens: 1000,
            temperature: 0.3
        });

        console.log("üì° OpenAI response status:", response.status);
        console.log("üì° OpenAI response choices length:", response.data?.choices?.length);

        const content = response.data?.choices?.[0]?.message?.content;
        console.log("üìÑ Raw content from OpenAI:", content);

        if (!content) {
            throw new Error("No content in AI response");
        }

        // Clean up the content - remove markdown formatting if present
        let cleanContent = content.trim();
        if (cleanContent.startsWith('```json')) {
            cleanContent = cleanContent.replace(/^```json\s*/, '').replace(/\s*```$/, '');
        } else if (cleanContent.startsWith('```')) {
            cleanContent = cleanContent.replace(/^```\s*/, '').replace(/\s*```$/, '');
        }

        console.log("üßπ Cleaned content:", cleanContent);

        const analysisResult = JSON.parse(cleanContent);
        console.log("‚úÖ Parsed analysis result:", analysisResult);

        return analysisResult;

    } catch (error) {
        console.error("‚ùå Error analyzing company website:", error);
        throw error;
    }
}

/**
 * POST /analyze-company - Analyze company website
 */
router.post("/analyze-company", async (req, res) => {
    try {
        const { website } = req.body;
        
        if (!website) {
            return res.status(400).json({ 
                success: false, 
                error: "Website URL is required" 
            });
        }

        console.log("üåê Analyzing company website:", website);

        const analysisResult = await analyzeCompanyWebsite(website);

        res.json({
            success: true,
            data: analysisResult
        });

    } catch (error) {
        console.error("‚ùå Error in company analysis:", error);
        res.status(500).json({
            success: false,
            error: error.message || "Failed to analyze company website"
        });
    }
});

module.exports = router;
