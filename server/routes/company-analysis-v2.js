const { Router } = require('express');
const fetch = require('node-fetch');

const router = Router();

const OPENAI_API_KEY = process.env.OPENAI_API_KEY;
const OPENAI_MODEL = process.env.OPENAI_MODEL || 'gpt-4o-mini';

console.log('üöÄ Loading company-analysis route (domain web-search version)');

// --- Web search helpers (DuckDuckGo HTML + r.jina.ai text proxy) ---
async function ddgSearch(query, limit = 5) {
    const url = `https://html.duckduckgo.com/html/?q=${encodeURIComponent(query)}`;
    const res = await fetch(url, {
        headers: {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/127.0.0.0 Safari/537.36'
        },
        timeout: 10000
    });
    if (!res.ok) return [];
    const html = await res.text();
    const urls = new Set();
    // Extract result links (DDG html uses 
    // <a class="result__a" href="https://duckduckgo.com/l/?uddg=ENCODED_URL&rut=...">
    const linkRegex = /<a[^>]+class="result__a"[^>]+href="([^"]+)"/ig;
    let m;
    while ((m = linkRegex.exec(html)) && urls.size < limit * 2) {
        const href = m[1];
        try {
            const u = new URL(href, 'https://duckduckgo.com');
            const forwarded = u.searchParams.get('uddg');
            if (forwarded) {
                const decoded = decodeURIComponent(forwarded);
                urls.add(decoded);
            } else if (href.startsWith('http')) {
                urls.add(href);
            }
        } catch (_) { /* ignore */ }
    }
    return Array.from(urls).slice(0, limit);
}

function sameDomain(urlString, baseHost) {
    try {
        const u = new URL(urlString);
        const h = u.hostname.replace(/^www\./, '');
        const b = baseHost.replace(/^www\./, '');
        return h === b || h.endsWith(`.${b}`);
    } catch (_) { return false; }
}

async function fetchReadableText(targetUrl) {
    try {
        const proxied = `https://r.jina.ai/http://${targetUrl.replace(/^https?:\/\//, '')}`;
        const r = await fetch(proxied, { headers: { 'User-Agent': 'ContractorCRM/1.0' }, timeout: 12000 });
        if (!r.ok) return '';
        const t = await r.text();
        return t || '';
    } catch (_) { return ''; }
}

async function domainWebSearchCollectText(hostname, companyName) {
    const baseHost = hostname.replace(/^www\./, '');
    const queries = [
        `site:${baseHost} ◊ê◊ï◊ì◊ï◊™`,
        `site:${baseHost} about`,
        `site:${baseHost} ◊§◊®◊ï◊ô◊ß◊ò◊ô◊ù`,
        `site:${baseHost} projects`,
        `site:${baseHost} ◊ë◊ò◊ô◊ó◊ï◊™`,
        `site:${baseHost} ◊™◊ß◊†◊ô◊ù`,
        `site:${baseHost} ISO`,
        `${companyName || baseHost} ◊ó◊ë◊®◊î ◊ë◊†◊ô◊î`,
    ];
    const foundUrls = new Set();
    for (const q of queries) {
        const links = await ddgSearch(q, 5);
        for (const l of links) {
            if (sameDomain(l, baseHost)) foundUrls.add(l);
        }
        if (foundUrls.size >= 8) break;
    }
    // Always include homepage
    foundUrls.add(`https://${baseHost}`);

    const texts = [];
    for (const url of Array.from(foundUrls).slice(0, 12)) {
        const text = await fetchReadableText(url);
        if (text && text.length > 300) {
            texts.push(`URL: ${url}\n\n${text}`);
        }
    }
    // Increase limit to allow more context for rich about text
    const combined = texts.join('\n\n-----------------------------\n\n').slice(0, 50000);
    return combined;
}

async function tryClearbit(hostname) {
    try {
        const url = `https://logo.clearbit.com/${hostname.replace(/^www\./, '')}`;
        const r = await fetch(url, { timeout: 8000 });
        if (r.ok) return url; // clearbit serves the image directly
    } catch (_) { }
    return null;
}

async function searchGoogleForLogo(hostname) {
    try {
        console.log('üîç Searching Google Images for logo:', hostname);
        const baseHost = hostname.replace(/^www\./, '');

        // Try multiple search queries
        const searchQueries = [
            `site:${hostname} logo`,
            `${baseHost} logo`,
            `logo ${baseHost}`
        ];

        for (const searchQuery of searchQueries) {
            try {
                const searchUrl = `https://www.google.com/search?q=${encodeURIComponent(searchQuery)}&tbm=isch`;

                const response = await fetch(searchUrl, {
                    headers: {
                        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/127.0.0.0 Safari/537.36',
                        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
                        'Accept-Language': 'en-US,en;q=0.5'
                    },
                    timeout: 10000
                });

                if (!response.ok) {
                    console.warn(`‚ö†Ô∏è Google Images search failed for "${searchQuery}":`, response.status);
                    continue;
                }

                const html = await response.text();
                console.log(`üìÑ Google Images HTML length for "${searchQuery}":`, html.length);

                // Try multiple patterns to extract first image URL
                const patterns = [
                    // Google Images JSON structure (most reliable)
                    /\["(https?:\/\/[^"]+\.(?:png|svg|jpg|jpeg|webp|ico))"/gi,
                    // Google Images ou field
                    /"ou":"(https?:\/\/[^"]+\.(?:png|svg|jpg|jpeg|webp|ico))"/gi,
                    // Direct img src
                    /<img[^>]+src="(https?:\/\/[^"]+\.(?:png|svg|jpg|jpeg|webp|ico))"/gi,
                    // Any image URL containing logo
                    /"(https?:\/\/[^"]*logo[^"]*\.(?:png|svg|jpg|jpeg|webp|ico))"/gi,
                    // Base64 encoded images (less common)
                    /<img[^>]+data-src="(https?:\/\/[^"]+\.(?:png|svg|jpg|jpeg|webp|ico))"/gi
                ];

                for (const pattern of patterns) {
                    const matches = Array.from(html.matchAll(pattern));
                    for (const match of matches) {
                        if (match[1]) {
                            let imgUrl = match[1];
                            // Skip data URLs
                            if (imgUrl.startsWith('data:')) continue;
                            // Skip very small images (likely icons) unless explicitly logo
                            if (imgUrl.includes('/favicon') && !imgUrl.includes('logo')) continue;
                            // Prefer URLs containing "logo" or from the same domain
                            const isLogoUrl = imgUrl.includes('logo') || imgUrl.includes(baseHost);
                            if (isLogoUrl || matches.indexOf(match) < 3) {
                                console.log('‚úÖ Found logo URL via Google Images:', imgUrl);
                                return imgUrl;
                            }
                        }
                    }
                }
            } catch (e) {
                console.warn(`‚ö†Ô∏è Error searching Google Images with query "${searchQuery}":`, e.message);
                continue;
            }
        }

        console.log('‚ùå No logo found in Google Images search results');
        return null;
    } catch (error) {
        console.warn('‚ö†Ô∏è Google Images logo search failed:', error.message);
        return null;
    }
}

async function tryFavicon(hostname) {
    const url = `https://${hostname.replace(/^www\./, '')}/favicon.ico`;
    try {
        const r = await fetch(url, { timeout: 8000 });
        if (r.ok) return url;
    } catch (_) { }
    return null;
}

// Google S2 favicon service (almost always returns an icon for the domain)
async function tryGoogleS2Favicon(hostname) {
    const base = hostname.replace(/^www\./, '');
    const url = `https://www.google.com/s2/favicons?domain=${base}&sz=256`;
    try {
        const r = await fetch(url, { timeout: 8000 });
        if (r.ok) return url;
    } catch (_) { }
    return null;
}

async function findLogoUrl(companyName, hostname) {
    const baseHost = hostname.replace(/^www\./, '');
    const baseUrl = `https://${baseHost}`;

    // 1) Try common logo paths on the site
    const commonPaths = [
        '/logo.png', '/logo.svg', '/logo.jpg', '/logo.jpeg',
        '/images/logo.png', '/images/logo.svg', '/images/logo.jpg',
        '/wp-content/uploads/logo.png', '/wp-content/uploads/logo.svg',
        '/assets/logo.png', '/assets/logo.svg', '/assets/images/logo.png',
        '/static/logo.png', '/static/logo.svg', '/img/logo.png',
        '/public/logo.png', '/public/logo.svg', '/uploads/logo.png',
        '/_next/static/logo.png', '/logo.webp', '/images/logo.webp'
    ];

    console.log('üîç Searching for logo on:', baseUrl);
    for (const path of commonPaths) {
        try {
            const testUrl = `${baseUrl}${path}`;
            const r = await fetch(testUrl, {
                timeout: 5000,
                headers: { 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36' }
            });
            if (r.ok) {
                const contentType = r.headers.get('content-type');
                if (contentType && contentType.startsWith('image/')) {
                    console.log('‚úÖ Found logo at:', testUrl);
                    return testUrl;
                }
            }
        } catch (e) {
            // Continue to next path
        }
    }

    // 2) Try to find logo in HTML of homepage
    try {
        const homepageResponse = await fetch(baseUrl, {
            timeout: 8000,
            headers: { 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36' }
        });
        if (homepageResponse.ok) {
            const html = await homepageResponse.text();
            // Look for common logo patterns in HTML
            const logoPatterns = [
                /<img[^>]+src=["']([^"']*logo[^"']*\.(?:png|svg|jpg|jpeg|webp))["']/i,
                /<img[^>]+src=["']([^"']*\/logo[^"']*\.(?:png|svg|jpg|jpeg|webp))["']/i,
                /logo["'][^>]*src=["']([^"']+)["']/i,
                /<img[^>]+alt=["']logo["'][^>]+src=["']([^"']+)["']/i
            ];
            for (const pattern of logoPatterns) {
                const match = html.match(pattern);
                if (match && match[1]) {
                    let logoUrl = match[1];
                    // Handle relative URLs
                    if (logoUrl.startsWith('//')) {
                        logoUrl = 'https:' + logoUrl;
                    } else if (logoUrl.startsWith('/')) {
                        logoUrl = baseUrl + logoUrl;
                    } else if (!logoUrl.startsWith('http')) {
                        logoUrl = baseUrl + '/' + logoUrl;
                    }
                    try {
                        const logoResponse = await fetch(logoUrl, {
                            method: 'HEAD',
                            timeout: 5000
                        });
                        if (logoResponse.ok) {
                            console.log('‚úÖ Found logo in HTML:', logoUrl);
                            return logoUrl;
                        }
                    } catch (e) {
                        // Continue searching
                    }
                }
            }
        }
    } catch (e) {
        console.log('‚ö†Ô∏è Could not parse homepage HTML for logo:', e.message);
    }

    // 3) Clearbit
    let url = await tryClearbit(hostname);
    if (url) {
        console.log('‚úÖ Found logo via Clearbit:', url);
        return url;
    }

    // 4) Google Images
    url = await searchGoogleForLogo(hostname);
    if (url) {
        console.log('‚úÖ Found logo via Google Images:', url);
        return url;
    }

    // 5) Site favicon (as last resort)
    url = await tryFavicon(hostname);
    if (url) {
        console.log('‚úÖ Using favicon as logo:', url);
        return url;
    }
    // 6) Google S2 favicon (final fallback)
    url = await tryGoogleS2Favicon(hostname);
    if (url) {
        console.log('‚úÖ Using Google S2 favicon as logo:', url);
        return url;
    }

    console.log('‚ùå No logo found for:', hostname);
    return null;
}

async function checkNameMatchWithAI(dbName, aiName) {
    if (!dbName || !aiName) return false;
    if (!OPENAI_API_KEY) return false;
    try {
        const system = '◊ê◊™◊î ◊¢◊ï◊ñ◊® ◊©◊ë◊ï◊ì◊ß ◊ê◊ù ◊©◊†◊ô ◊©◊û◊ï◊™ ◊ó◊ë◊®◊ï◊™ ◊û◊™◊ô◊ô◊ó◊°◊ô◊ù ◊ú◊ê◊ï◊™◊î ◊ó◊ë◊®◊î. ◊î◊ó◊ñ◊® ◊®◊ß "◊õ◊ü" ◊ê◊ï "◊ú◊ê".';
        const user = `◊©◊ù 1: "${dbName}"
◊©◊ù 2: "${aiName}"

◊î◊ê◊ù ◊©◊†◊ô ◊î◊©◊û◊ï◊™ ◊û◊™◊ô◊ô◊ó◊°◊ô◊ù ◊ú◊ê◊ï◊™◊î ◊ó◊ë◊®◊î? ◊ú◊ì◊ï◊í◊û◊î: "◊ß◊ë◊ï◊¶◊™ ◊™◊ì◊î◊®" ◊õ◊ï◊ú◊ú◊™ "◊™◊ì◊î◊® ◊ë◊†◊ô◊î ◊ë◊¢"◊û", "◊ô◊ï◊†◊ô◊ú◊ë◊®" ◊õ◊ï◊ú◊ú◊™ "◊ô◊ï◊†◊ô◊ú◊ë◊® ◊ô◊©◊®◊ê◊ú ◊ë◊¢"◊û". ◊î◊ó◊ñ◊® ◊®◊ß "◊õ◊ü" ◊ê◊ï "◊ú◊ê".`;
        const response = await callOpenAIChatSimple({ systemPrompt: system, userPrompt: user });
        const answer = response.trim().toLowerCase();
        return answer.includes('◊õ◊ü') || answer.includes('yes');
    } catch (e) {
        console.warn('‚ö†Ô∏è AI name match check failed:', e.message);
        return false;
    }
}

async function callOpenAIChatSimple({ systemPrompt, userPrompt, maxTokens = 8000 }) {
    if (!OPENAI_API_KEY) {
        throw new Error('Missing OPENAI_API_KEY environment variable');
    }
    const payload = {
        model: OPENAI_MODEL,
        messages: [
            { role: 'system', content: systemPrompt },
            { role: 'user', content: userPrompt }
        ],
        temperature: 0.2,
        max_tokens: maxTokens
    };
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
        method: 'POST',
        headers: {
            'Authorization': `Bearer ${OPENAI_API_KEY}`,
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(payload)
    });
    const data = await response.json();
    if (!response.ok) {
        const message = data?.error?.message || `OpenAI API error (${response.status})`;
        throw new Error(message);
    }
    const text = data?.choices?.[0]?.message?.content || '';
    if (!text) throw new Error('OpenAI API returned empty content');
    return text;
}

// Use OpenAI Responses API with web_search tool to allow direct browsing
async function callOpenAIWithWebSearch({ systemPrompt, userPrompt, maxTokens = 12000 }) {
    if (!OPENAI_API_KEY) {
        throw new Error('Missing OPENAI_API_KEY environment variable');
    }
    const model = /4\.1/.test(String(OPENAI_MODEL)) ? OPENAI_MODEL : 'gpt-4.1-mini';
    const payload = {
        model,
        input: [
            { role: 'system', content: systemPrompt },
            { role: 'user', content: userPrompt }
        ],
        tools: [{ type: 'web_search' }],
        max_output_tokens: maxTokens
    };
    const response = await fetch('https://api.openai.com/v1/responses', {
        method: 'POST',
        headers: {
            'Authorization': `Bearer ${OPENAI_API_KEY}`,
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(payload)
    });
    const data = await response.json();
    if (!response.ok) {
        const message = data?.error?.message || `OpenAI Responses API error (${response.status})`;
        throw new Error(message);
    }
    const text = data?.output_text
        || data?.choices?.[0]?.message?.content
        || (Array.isArray(data?.output) ? data.output.map(o => (o?.content?.[0]?.text || '')).join('\n') : '')
        || '';
    if (!text) throw new Error('OpenAI Responses API returned empty content');
    return text;
}

function getWordCount(text) {
    if (!text) return 0;
    const words = String(text).trim().split(/\s+/g);
    return words.filter(Boolean).length;
}

// Generator for a rich "about" section - always ensures long, detailed text
async function generateRichAbout(collectedText, displayName, hostname) {
    const system = `◊ê◊™◊î ◊õ◊ï◊™◊ë ◊™◊ï◊õ◊ü ◊û◊ï◊û◊ó◊î ◊ë◊¢◊ë◊®◊ô◊™ ◊ú◊¢◊û◊ï◊ì "◊ê◊ï◊ì◊ï◊™" ◊©◊ú ◊ó◊ë◊®◊ï◊™ ◊ë◊†◊ô◊î ◊ï◊†◊ì◊ú"◊ü ◊ë◊ô◊©◊®◊ê◊ú.
◊î◊û◊©◊ô◊û◊î ◊©◊ú◊ö ◊î◊ô◊ê ◊ú◊õ◊™◊ï◊ë ◊ò◊ß◊°◊ò ◊û◊ß◊ô◊£, ◊ê◊®◊ï◊ö ◊û◊ê◊ï◊ì ◊ï◊û◊§◊ï◊®◊ò - ◊ú◊§◊ó◊ï◊™ 1500 ◊û◊ô◊ú◊ô◊ù, ◊ï◊¢◊ì◊ô◊£ 2000-3000 ◊û◊ô◊ú◊ô◊ù.
◊î◊ò◊ß◊°◊ò ◊ó◊ô◊ô◊ë ◊ú◊î◊ô◊ï◊™ ◊ê◊®◊ï◊ö ◊û◊ê◊ï◊ì, ◊û◊§◊ï◊®◊ò, ◊û◊ß◊¶◊ï◊¢◊ô ◊ï◊®◊î◊ï◊ò.
◊õ◊ú◊ï◊ú: ◊î◊ô◊°◊ò◊ï◊®◊ô◊î ◊û◊§◊ï◊®◊ò◊™ ◊©◊ú ◊î◊ó◊ë◊®◊î, ◊™◊ó◊ï◊û◊ô ◊§◊¢◊ô◊ú◊ï◊™ ◊®◊ó◊ë◊ô◊ù, ◊§◊®◊ï◊ô◊ß◊ò◊ô◊ù ◊ë◊ï◊ú◊ò◊ô◊ù ◊¢◊ù ◊§◊®◊ò◊ô◊ù ◊°◊§◊¶◊ô◊§◊ô◊ô◊ù, ◊©◊†◊ï◊™ ◊†◊ô◊°◊ô◊ï◊ü ◊ï◊™◊ß, ◊¶◊ï◊ï◊™ ◊û◊ß◊¶◊ï◊¢◊ô ◊ï◊û◊†◊ï◊°◊î, ◊ò◊õ◊†◊ï◊ú◊ï◊í◊ô◊ï◊™ ◊û◊™◊ß◊ì◊û◊ï◊™ ◊ë◊©◊ô◊û◊ï◊©, ◊©◊ô◊®◊ï◊™◊ô◊ù ◊û◊ú◊ê◊ô◊ù, ◊ú◊ß◊ï◊ó◊ï◊™ ◊ï◊§◊®◊ï◊ô◊ß◊ò◊ô◊ù ◊ß◊ï◊ì◊û◊ô◊ù, ◊™◊¢◊ï◊ì◊ï◊™ ◊ï◊î◊°◊û◊õ◊ï◊™ ◊û◊ß◊¶◊ï◊¢◊ô◊ï◊™, ◊ó◊ì◊©◊†◊ï◊™ ◊ï◊§◊ô◊™◊ï◊ó, ◊ê◊ó◊®◊ô◊ï◊™ ◊ó◊ë◊®◊™◊ô◊™ ◊ï◊°◊ë◊ô◊ë◊™◊ô◊™, ◊ó◊ñ◊ï◊ü ◊ï◊û◊ò◊®◊ï◊™ ◊ê◊®◊ï◊õ◊ï◊™ ◊ò◊ï◊ï◊ó, ◊©◊ô◊ò◊ï◊™ ◊¢◊ë◊ï◊ì◊î, ◊í◊ô◊©◊î ◊ú◊ú◊ß◊ï◊ó, ◊¢◊®◊õ◊ô◊ù ◊ï◊¢◊ß◊®◊ï◊†◊ï◊™, ◊§◊®◊°◊ô◊ù ◊ï◊î◊õ◊®◊ï◊™, ◊©◊ï◊™◊§◊ï◊ô◊ï◊™, ◊î◊™◊§◊™◊ó◊ï◊™ ◊î◊ó◊ë◊®◊î ◊ú◊ê◊ï◊®◊ö ◊î◊©◊†◊ô◊ù.
◊ó◊©◊ï◊ë ◊û◊ê◊ï◊ì: ◊î◊ò◊ß◊°◊ò ◊ó◊ô◊ô◊ë ◊ú◊î◊ô◊ï◊™ ◊ê◊®◊ï◊ö ◊û◊ê◊ï◊ì - ◊ú◊§◊ó◊ï◊™ 1500 ◊û◊ô◊ú◊ô◊ù! ◊î◊®◊ó◊ë ◊õ◊ú ◊†◊ï◊©◊ê, ◊î◊ï◊°◊£ ◊§◊®◊ò◊ô◊ù, ◊™◊ê◊® ◊ë◊ê◊ï◊§◊ü ◊û◊¢◊û◊ô◊ß.`;

    const user = `◊õ◊™◊ï◊ë ◊ò◊ß◊°◊ò "◊ê◊ï◊ì◊ï◊™ ◊î◊ó◊ë◊®◊î" ◊ê◊®◊ï◊ö ◊û◊ê◊ï◊ì, ◊û◊§◊ï◊®◊ò ◊ï◊û◊ß◊ô◊£ (◊ú◊§◊ó◊ï◊™ 1500 ◊û◊ô◊ú◊ô◊ù, ◊¢◊ì◊ô◊£ 2000-3000 ◊û◊ô◊ú◊ô◊ù) ◊¢◊ë◊ï◊® "${displayName}" (${hostname}).
◊î◊©◊™◊û◊© ◊®◊ß ◊ë◊û◊ô◊ì◊¢ ◊û◊ò◊ß◊°◊ò◊ô◊ù ◊©◊†◊ê◊°◊§◊ï ◊û◊î◊ê◊™◊® (WEB_RESULTS) - ◊ê◊ú ◊™◊û◊¶◊ô◊ê ◊¢◊ï◊ë◊ì◊ï◊™, ◊ê◊ë◊ú ◊î◊®◊ó◊ë ◊ï◊™◊ê◊® ◊ë◊¶◊ï◊®◊î ◊û◊§◊ï◊®◊ò◊™ ◊ê◊™ ◊û◊î ◊©◊ô◊©.
◊ê◊ù ◊ô◊© ◊û◊¢◊ò ◊û◊ô◊ì◊¢, ◊î◊®◊ó◊ë ◊õ◊ú ◊†◊ß◊ï◊ì◊î ◊¢◊ù ◊§◊®◊ò◊ô◊ù ◊û◊§◊ï◊®◊ò◊ô◊ù.
◊õ◊ú◊ï◊ú ◊õ◊ú ◊û◊î ◊©◊ê◊§◊©◊® ◊¢◊ú: ◊î◊ô◊°◊ò◊ï◊®◊ô◊î, ◊™◊ó◊ï◊û◊ô ◊§◊¢◊ô◊ú◊ï◊™, ◊§◊®◊ï◊ô◊ß◊ò◊ô◊ù, ◊†◊ô◊°◊ô◊ï◊ü, ◊¶◊ï◊ï◊™, ◊ò◊õ◊†◊ï◊ú◊ï◊í◊ô◊ï◊™, ◊©◊ô◊®◊ï◊™◊ô◊ù, ◊ú◊ß◊ï◊ó◊ï◊™, ◊™◊¢◊ï◊ì◊ï◊™, ◊ó◊ì◊©◊†◊ï◊™, ◊ê◊ó◊®◊ô◊ï◊™ ◊ó◊ë◊®◊™◊ô◊™, ◊ó◊ñ◊ï◊ü.
◊ó◊©◊ï◊ë ◊û◊ê◊ï◊ì: ◊î◊ò◊ß◊°◊ò ◊ó◊ô◊ô◊ë ◊ú◊î◊ô◊ï◊™ ◊ê◊®◊ï◊ö ◊û◊ê◊ï◊ì ◊ï◊û◊§◊ï◊®◊ò - ◊ú◊§◊ó◊ï◊™ 1500 ◊û◊ô◊ú◊ô◊ù! ◊õ◊™◊ï◊ë ◊§◊°◊ß◊ê◊ï◊™ ◊ê◊®◊ï◊õ◊ï◊™, ◊î◊®◊ó◊ë ◊õ◊ú ◊†◊ï◊©◊ê, ◊™◊ê◊® ◊ë◊ê◊ï◊§◊ü ◊û◊¢◊û◊ô◊ß ◊ï◊û◊§◊ï◊®◊ò.

◊û◊ô◊ì◊¢ ◊©◊†◊ê◊°◊£ ◊û◊î◊ê◊™◊®:
"""
${(collectedText || '').slice(0, 48000)}
"""`;
    try {
        const about = await callOpenAIChatSimple({ systemPrompt: system, userPrompt: user, maxTokens: 25000 });
        return (about || '').trim();
    } catch (e) {
        console.warn('‚ö†Ô∏è generateRichAbout failed:', e.message);
        return '';
    }
}

async function enforceExactWordLength(baseText, targetWords, extraContext) {
    const system = '◊ê◊™◊î ◊¢◊ï◊®◊ö ◊™◊ï◊õ◊ü ◊ë◊¢◊ë◊®◊ô◊™. ◊õ◊™◊ï◊ë ◊ê◊ï ◊¢◊®◊ï◊ö ◊ê◊™ ◊î◊ò◊ß◊°◊ò ◊õ◊ö ◊©◊ô◊õ◊ô◊ú ◊ë◊ì◊ô◊ï◊ß ◊ê◊™ ◊û◊°◊§◊® ◊î◊û◊ô◊ú◊ô◊ù ◊î◊û◊ë◊ï◊ß◊©. ◊©◊û◊ï◊® ◊¢◊ú ◊¢◊ï◊ë◊ì◊ï◊™, ◊ë◊î◊ô◊®◊ï◊™ ◊ï◊°◊í◊†◊ï◊ü ◊û◊ß◊¶◊ï◊¢◊ô. ◊î◊ó◊ñ◊® ◊ò◊ß◊°◊ò ◊ë◊ú◊ë◊ì, ◊ú◊ú◊ê ◊õ◊ï◊™◊®◊ï◊™, ◊ú◊ú◊ê ◊®◊©◊ô◊û◊ï◊™ ◊ï◊ú◊ú◊ê JSON. ◊ó◊©◊ï◊ë ◊û◊ê◊ï◊ì: ◊î◊ò◊ß◊°◊ò ◊ó◊ô◊ô◊ë ◊ú◊î◊õ◊ô◊ú ◊ë◊ì◊ô◊ï◊ß ' + targetWords + ' ◊û◊ô◊ú◊ô◊ù!';
    const user = `◊û◊°◊§◊® ◊û◊ô◊ú◊ô◊ù ◊†◊ì◊®◊©: ${targetWords} ◊û◊ô◊ú◊ô◊ù ◊ë◊ì◊ô◊ï◊ß.

[◊ò◊ß◊°◊ò ◊ß◊ô◊ô◊ù]
"""
${baseText || ''}
"""

[◊û◊ô◊ì◊¢ ◊†◊ï◊°◊£ ◊û◊î◊ê◊ô◊†◊ò◊®◊†◊ò ◊ú◊î◊®◊ó◊ë◊î]
"""
${(extraContext || '').slice(0, 8000)}
"""

◊õ◊™◊ï◊ë ◊ò◊ß◊°◊ò ◊û◊§◊ï◊®◊ò ◊ë◊ê◊ï◊®◊ö ${targetWords} ◊û◊ô◊ú◊ô◊ù ◊ë◊ì◊ô◊ï◊ß. ◊ê◊ù ◊î◊ò◊ß◊°◊ò ◊î◊ß◊ô◊ô◊ù ◊ß◊¶◊®, ◊î◊®◊ó◊ë ◊ê◊ï◊™◊ï ◊¢◊ù ◊î◊û◊ô◊ì◊¢ ◊î◊†◊ï◊°◊£. ◊ê◊ù ◊î◊ï◊ê ◊ê◊®◊ï◊ö, ◊¶◊û◊¶◊ù ◊ê◊ï◊™◊ï. ◊î◊™◊ï◊¶◊ê◊î ◊ó◊ô◊ô◊ë◊™ ◊ú◊î◊õ◊ô◊ú ◊ë◊ì◊ô◊ï◊ß ${targetWords} ◊û◊ô◊ú◊ô◊ù.`;
    const rewritten = await callOpenAIChatSimple({ systemPrompt: system, userPrompt: user, maxTokens: 12000 });
    const final = rewritten.trim();
    const count = getWordCount(final);
    // If still not exact, retry once more with stronger instruction
    if (count !== targetWords && count > 0) {
        console.log(`‚ö†Ô∏è First rewrite: ${count} words (target: ${targetWords}), retrying...`);
        const retryUser = `◊î◊ò◊ß◊°◊ò ◊î◊ë◊ê ◊¶◊®◊ô◊ö ◊ú◊î◊ô◊ï◊™ ◊ë◊ì◊ô◊ï◊ß ${targetWords} ◊û◊ô◊ú◊ô◊ù. ◊ê◊ù ◊î◊ï◊ê ◊ß◊¶◊® - ◊î◊®◊ó◊ë ◊ê◊ï◊™◊ï. ◊ê◊ù ◊î◊ï◊ê ◊ê◊®◊ï◊ö - ◊ß◊ï◊¶◊® ◊ê◊ï◊™◊ï. ◊î◊™◊ï◊¶◊ê◊î ◊ó◊ô◊ô◊ë◊™ ◊ú◊î◊õ◊ô◊ú ◊ë◊ì◊ô◊ï◊ß ${targetWords} ◊û◊ô◊ú◊ô◊ù, ◊ú◊ê ◊§◊ó◊ï◊™ ◊ï◊ú◊ê ◊ô◊ï◊™◊®!

◊ò◊ß◊°◊ò ◊†◊ï◊õ◊ó◊ô (${count} ◊û◊ô◊ú◊ô◊ù):
"""
${final}
"""

◊û◊ô◊ì◊¢ ◊†◊ï◊°◊£ ◊ú◊î◊®◊ó◊ë◊î (◊ê◊ù ◊¶◊®◊ô◊ö):
"""
${(extraContext || '').slice(0, 4000)}
"""

◊õ◊™◊ï◊ë ◊ò◊ß◊°◊ò ◊ë◊ê◊ï◊®◊ö ${targetWords} ◊û◊ô◊ú◊ô◊ù ◊ë◊ì◊ô◊ï◊ß!`;
        const retryResult = await callOpenAIChatSimple({ systemPrompt: system, userPrompt: retryUser, maxTokens: 12000 });
        return retryResult.trim();
    }
    return final;
}

async function enforceRangeWordLength(baseText, minWords, maxWords, preferred, extraContext) {
    const count = getWordCount(baseText);
    if (count >= minWords && count <= maxWords) return baseText;
    const target = preferred || Math.round((minWords + maxWords) / 2);
    return await enforceExactWordLength(baseText, target, extraContext);
}

function normalizeProjects(projectsValue) {
    if (Array.isArray(projectsValue)) {
        return projectsValue
            .map((item) => {
                if (typeof item === 'string') return item.trim();
                if (item && typeof item === 'object') {
                    const name = item.name || item.title || item.project || '';
                    const desc = item.description || item.details || '';
                    return [name, desc].filter(Boolean).join(' ‚Äì ');
                }
                return String(item || '').trim();
            })
            .filter(Boolean)
            .join('\n');
    }
    if (typeof projectsValue === 'string') {
        return projectsValue.trim();
    }
    return '';
}

async function analyzeCompanyWebsite(websiteUrl, companyName) {
    console.log('üîç Starting company analysis for:', websiteUrl, 'name hint:', companyName || '(none provided)');

    const normalizedUrl = websiteUrl.startsWith('http') ? websiteUrl : `https://${websiteUrl}`;
    const { hostname } = new URL(normalizedUrl);
    const displayName = (companyName || '').trim() || hostname;

    // 1) Perform domain-focused web search and collect readable text
    console.log('üåê Performing domain web search and collection for:', hostname);
    const collectedText = await domainWebSearchCollectText(hostname, displayName);

    // 2) Always use generateRichAbout to ensure long, detailed text (minimum 1500 words)
    console.log('ü§ñ Generating rich about text (1500+ words)...');
    let aboutText = '';
    try {
        // First try to generate rich about text
        aboutText = await generateRichAbout(collectedText, displayName, hostname);
        const wordCount = getWordCount(aboutText);
        console.log(`‚úÖ Initial rich about text: ${aboutText.length} characters, ${wordCount} words`);

        // Always enforce minimum of 1500 words
        if (wordCount < 1500) {
            console.log(`‚ö†Ô∏è About text too short (${wordCount} words), enforcing 1500 words minimum...`);
            aboutText = await enforceExactWordLength(aboutText || displayName + ' ◊î◊ô◊ê ◊ó◊ë◊®◊î ◊û◊ï◊ë◊ô◊ú◊î', 1500, collectedText);
            const finalWordCount = getWordCount(aboutText);
            console.log(`‚úÖ Final about text: ${aboutText.length} characters, ${finalWordCount} words`);
        }
    } catch (e) {
        console.error('‚ùå Failed to generate about text:', e.message);
        // Fallback: try to generate basic text and expand it
        try {
            const fallbackResponse = await callOpenAIChatSimple({ 
                systemPrompt: '◊ê◊™◊î ◊õ◊ï◊™◊ë ◊™◊ï◊õ◊ü ◊ë◊¢◊ë◊®◊ô◊™. ◊õ◊™◊ï◊ë ◊ò◊ß◊°◊ò ◊ê◊®◊ï◊ö ◊ï◊û◊§◊ï◊®◊ò.', 
                userPrompt: `◊õ◊™◊ï◊ë ◊ò◊ß◊°◊ò "◊ê◊ï◊ì◊ï◊™ ◊î◊ó◊ë◊®◊î" ◊ê◊®◊ï◊ö ◊û◊ê◊ï◊ì (1500 ◊û◊ô◊ú◊ô◊ù ◊ú◊§◊ó◊ï◊™) ◊¢◊ë◊ï◊® "${displayName}". ◊û◊ô◊ì◊¢: ${collectedText.slice(0, 20000)}`, 
                maxTokens: 20000 
            });
            aboutText = (fallbackResponse || '').trim();
            if (getWordCount(aboutText) < 1500) {
                aboutText = await enforceExactWordLength(aboutText || displayName + ' ◊î◊ô◊ê ◊ó◊ë◊®◊î ◊û◊ï◊ë◊ô◊ú◊î', 1500, collectedText);
            }
        } catch (fallbackError) {
            console.error('‚ùå Fallback generation also failed:', fallbackError.message);
            aboutText = '';
        }
    }

    // 3) Search for logo - try direct site search first, then Google Images
    console.log('üîç Searching for logo...');
    let logoUrl = null;

    // First, try to find logo directly on the website (most reliable)
    const baseHost = hostname.replace(/^www\./, '');
    const baseUrl = `https://${baseHost}`;
    try {
        const homepageResponse = await fetch(baseUrl, {
            timeout: 8000,
            headers: { 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36' }
        });
        if (homepageResponse.ok) {
            const html = await homepageResponse.text();
            // Look for logo in HTML - prioritize elements with "logo" in class/id/alt
            const logoPatterns = [
                /<img[^>]*(?:class|id|alt)=["'][^"']*logo[^"']*["'][^>]*src=["']([^"']+\.(?:png|svg|jpg|jpeg|webp))["']/i,
                /<img[^>]*src=["']([^"']*logo[^"']*\.(?:png|svg|jpg|jpeg|webp))["']/i,
                /<img[^>]*src=["']([^"']*\/logo[^"']*\.(?:png|svg|jpg|jpeg|webp))["']/i
            ];
            for (const pattern of logoPatterns) {
                const match = html.match(pattern);
                if (match && match[1]) {
                    let imgUrl = match[1];
                    if (imgUrl.startsWith('//')) imgUrl = 'https:' + imgUrl;
                    else if (imgUrl.startsWith('/')) imgUrl = baseUrl + imgUrl;
                    else if (!imgUrl.startsWith('http')) imgUrl = baseUrl + '/' + imgUrl;
                    console.log('‚úÖ Found logo on homepage:', imgUrl);
                    logoUrl = imgUrl;
                    break;
                }
            }
        }
    } catch (e) {
        console.warn('‚ö†Ô∏è Could not search homepage for logo:', e.message);
    }

    // If not found on homepage, try Google Images
    if (!logoUrl) {
        logoUrl = await searchGoogleForLogo(hostname);
    }

    // Fallback chain if Google Images doesn't work
    if (!logoUrl) {
        logoUrl = await findLogoUrl(displayName, hostname);
    }

    // Final fallback: S2 favicon
    if (!logoUrl) {
        logoUrl = await tryGoogleS2Favicon(hostname);
        if (logoUrl) {
            console.log('‚úÖ Using Google S2 favicon as logo:', logoUrl);
        }
    }

    // Build result object
    const result = {
        companyName: displayName,
        about: aboutText,
        safety: '', // Can be filled later if needed
        projects: '', // Can be filled later if needed
        logoUrl: logoUrl
    };

    console.log('‚úÖ Analysis result:', {
        companyName: result.companyName,
        aboutLength: result.about.length,
        aboutWords: getWordCount(result.about),
        hasLogo: !!result.logoUrl
    });
    return result;
}

router.post('/analyze-company', async (req, res) => {
    console.log('üéØ POST /analyze-company invoked with body:', req.body);
    try {
        const { website, companyName } = req.body || {};

        if (!website) {
            return res.status(400).json({ success: false, error: 'Website URL is required' });
        }

        if (!OPENAI_API_KEY) {
            return res.status(500).json({ success: false, error: 'OPENAI_API_KEY is not configured on the server' });
        }

        const analysisResult = await analyzeCompanyWebsite(website, companyName);

        res.json({ success: true, data: analysisResult });
    } catch (error) {
        console.error('‚ùå analyze-company failed:', error);
        res.status(500).json({
            success: false,
            error: error.message || 'Failed to analyze company website'
        });
    }
});

router.post('/check-name-match', async (req, res) => {
    try {
        const { dbName, aiName } = req.body || {};
        if (!dbName || !aiName) {
            return res.status(400).json({ success: false, error: 'Both dbName and aiName are required' });
        }
        const matches = await checkNameMatchWithAI(dbName, aiName);
        res.json({ success: true, matches });
    } catch (error) {
        console.error('‚ùå check-name-match failed:', error);
        res.status(500).json({
            success: false,
            error: error.message || 'Failed to check name match'
        });
    }
});

module.exports = router;
