const { Router } = require('express');
const fetch = require('node-fetch');

const router = Router();

const OPENAI_API_KEY = process.env.OPENAI_API_KEY;
const OPENAI_MODEL = process.env.OPENAI_MODEL || 'gpt-4o-mini';

console.log('üöÄ Loading company-analysis route (web-search version)');

async function callOpenAIChatWithWebSearch({ systemPrompt, userPrompt }) {
    if (!OPENAI_API_KEY) {
        throw new Error('Missing OPENAI_API_KEY environment variable');
    }

    const payload = {
        model: OPENAI_MODEL,
        messages: [
            { role: 'system', content: systemPrompt },
            { role: 'user', content: userPrompt }
        ],
        tools: [{ type: 'web_search' }],
        temperature: 0.2,
        max_tokens: 4000
    };

    const response = await fetch('https://api.openai.com/v1/chat/completions', {
        method: 'POST',
        headers: {
            'Authorization': `Bearer ${OPENAI_API_KEY}`,
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(payload)
    });

    const data = await response.json();
    if (!response.ok) {
        const message = data?.error?.message || `OpenAI API error (${response.status})`;
        throw new Error(message);
    }

    const text = data?.choices?.[0]?.message?.content || '';

    if (!text) {
        throw new Error('OpenAI API returned empty content');
    }

    return text;
}

function normalizeProjects(projectsValue) {
    if (Array.isArray(projectsValue)) {
        return projectsValue
            .map((item) => {
                if (typeof item === 'string') return item.trim();
                if (item && typeof item === 'object') {
                    const name = item.name || item.title || item.project || '';
                    const desc = item.description || item.details || '';
                    return [name, desc].filter(Boolean).join(' ‚Äì ');
                }
                return String(item || '').trim();
            })
            .filter(Boolean)
            .join('\n');
    }
    if (typeof projectsValue === 'string') {
        return projectsValue.trim();
    }
    return '';
}

async function analyzeCompanyWebsite(websiteUrl, companyName) {
    console.log('üîç Starting company analysis for:', websiteUrl, 'name hint:', companyName || '(none provided)');

    const normalizedUrl = websiteUrl.startsWith('http') ? websiteUrl : `https://${websiteUrl}`;
    const { hostname } = new URL(normalizedUrl);
    const displayName = (companyName || '').trim() || hostname;

    const systemPrompt = `◊ê◊™◊î ◊ê◊†◊ú◊ô◊°◊ò ◊û◊ï◊û◊ó◊î ◊ë◊ó◊ë◊®◊ï◊™ ◊ë◊†◊ô◊î ◊ï◊†◊ì◊ú"◊ü ◊ë◊ô◊©◊®◊ê◊ú. 
◊ó◊©◊ï◊ë ◊û◊ê◊ï◊ì: ◊¢◊ú◊ô◊ö ◊ú◊î◊©◊™◊û◊© ◊ë◊õ◊ú◊ô web_search ◊õ◊ì◊ô ◊ú◊ó◊§◊© ◊û◊ô◊ì◊¢ ◊¢◊ì◊õ◊†◊ô ◊¢◊ú ◊î◊ó◊ë◊®◊î ◊û◊î◊ê◊™◊® ${hostname}.
◊ê◊ú ◊™◊°◊™◊û◊ö ◊¢◊ú ◊î◊ô◊ì◊¢ ◊î◊ß◊ô◊ô◊ù ◊©◊ú◊ö - ◊ó◊§◊© ◊û◊ô◊ì◊¢ ◊ó◊ì◊© ◊ï◊û◊¢◊ï◊ì◊õ◊ü ◊û◊î◊ê◊ô◊†◊ò◊®◊†◊ò.`;

    const userPrompt = `◊ê◊†◊ê ◊ó◊§◊© ◊û◊ô◊ì◊¢ ◊¢◊ú ◊î◊ó◊ë◊®◊î "${displayName}" (${hostname}) ◊ë◊ê◊û◊¶◊¢◊ï◊™ web_search.
◊ó◊§◊© ◊û◊ô◊ì◊¢ ◊¢◊ú:
1. ◊©◊ù ◊î◊ó◊ë◊®◊î ◊î◊û◊ì◊ï◊ô◊ß
2. ◊™◊ô◊ê◊ï◊® ◊î◊ó◊ë◊®◊î ◊ï◊§◊¢◊ô◊ú◊ï◊™◊î
3. ◊§◊®◊ï◊ô◊ß◊ò◊ô◊ù ◊©◊ë◊ô◊¶◊¢◊î ◊ê◊ï ◊û◊ë◊¶◊¢◊™
4. ◊û◊ô◊ì◊¢ ◊¢◊ú ◊ë◊ò◊ô◊ó◊ï◊™ ◊ï◊î◊°◊û◊õ◊ï◊™
5. ◊ú◊ï◊í◊ï ◊î◊ó◊ë◊®◊î (◊ê◊ù ◊ß◊ô◊ô◊ù)

◊î◊ó◊ñ◊® ◊ê◊™ ◊î◊û◊ô◊ì◊¢ ◊ë◊§◊ï◊®◊û◊ò JSON ◊î◊ë◊ê:
{
  "companyName": "◊©◊ù ◊î◊ó◊ë◊®◊î ◊î◊û◊ì◊ï◊ô◊ß",
  "about": "◊™◊ô◊ê◊ï◊® ◊û◊§◊ï◊®◊ò ◊©◊ú ◊î◊ó◊ë◊®◊î (3-5 ◊û◊©◊§◊ò◊ô◊ù ◊ë◊¢◊ë◊®◊ô◊™)",
  "safety": "◊û◊ô◊ì◊¢ ◊¢◊ú ◊ë◊ò◊ô◊ó◊ï◊™, ◊î◊°◊û◊õ◊ï◊™ ◊ï◊™◊ß◊†◊ô◊ù",
  "projects": ["◊§◊®◊ï◊ô◊ß◊ò 1", "◊§◊®◊ï◊ô◊ß◊ò 2", "◊§◊®◊ï◊ô◊ß◊ò 3"],
  "logoUrl": "URL ◊©◊ú ◊î◊ú◊ï◊í◊ï ◊ê◊ï null"
}

◊ó◊©◊ï◊ë: ◊î◊ó◊ñ◊® ◊®◊ß JSON ◊™◊ß◊ô◊ü ◊ú◊ú◊ê ◊ò◊ß◊°◊ò ◊†◊ï◊°◊£.`;

    const rawResponse = await callOpenAIChatWithWebSearch({ systemPrompt, userPrompt });
    console.log('üìÑ Raw OpenAI response (first 500 chars):', rawResponse.slice(0, 500));

    let cleaned = rawResponse.trim();
    if (cleaned.startsWith('```json')) cleaned = cleaned.replace(/^```json\s*/, '').replace(/\s*```$/, '');
    if (cleaned.startsWith('```')) cleaned = cleaned.replace(/^```\s*/, '').replace(/\s*```$/, '');

    let parsed;
    try {
        parsed = JSON.parse(cleaned);
    } catch (err) {
        console.error('‚ùå Failed to parse JSON from OpenAI response:', err.message);
        const match = cleaned.match(/\{[\s\S]*\}/);
        if (match) {
            parsed = JSON.parse(match[0]);
        } else {
            throw err;
        }
    }

    const result = {
        companyName: parsed?.companyName || displayName,
        about: parsed?.about || '',
        safety: parsed?.safety || '',
        projects: normalizeProjects(parsed?.projects),
        logoUrl: parsed?.logoUrl || null
    };

    console.log('‚úÖ Parsed analysis result:', result);
    return result;
}

router.post('/analyze-company', async (req, res) => {
    console.log('üéØ POST /analyze-company invoked with body:', req.body);
    try {
        const { website, companyName } = req.body || {};

        if (!website) {
            return res.status(400).json({ success: false, error: 'Website URL is required' });
        }

        if (!OPENAI_API_KEY) {
            return res.status(500).json({ success: false, error: 'OPENAI_API_KEY is not configured on the server' });
        }

        const analysisResult = await analyzeCompanyWebsite(website, companyName);

        res.json({ success: true, data: analysisResult });
    } catch (error) {
        console.error('‚ùå analyze-company failed:', error);
        res.status(500).json({
            success: false,
            error: error.message || 'Failed to analyze company website'
        });
    }
});

module.exports = router;
