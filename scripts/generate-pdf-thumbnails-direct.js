require('dotenv').config();
const { getDb } = require('../server/lib/mongo');
const { pdfFirstPageToPngBuffer } = require('../server/lib/pdfThumbnail');
const { savePngToVercelBlob } = require('../server/lib/saveToVercelBlob');
const fetch = require('node-fetch');

async function generateAndUpdateThumbnails() {
    try {
        console.log('🔗 Connecting to database...');
        const db = await getDb();
        const projectId = '68bd7488690387dac0eb69c0';

        // Get the current claim
        console.log('🔍 Getting current claim...');
        const claim = await db.collection('claims').findOne({ projectId });
        if (!claim) {
            console.log('❌ No claim found for project');
            return;
        }

        console.log('📋 Current attachments:', claim.generalAttachments?.length || 0);

        // Generate thumbnails for each attachment
        const updatedAttachments = [];
        for (const attachment of claim.generalAttachments || []) {
            if (attachment.isAutoGenerated && attachment.fileUrl) {
                console.log(`\n🖼️ Processing attachment: ${attachment.id}`);
                console.log(`   PDF URL: ${attachment.fileUrl.substring(0, 80)}...`);

                try {
                    // Fetch the PDF
                    console.log('   📥 Fetching PDF...');
                    const response = await fetch(attachment.fileUrl);
                    if (!response.ok) {
                        throw new Error(`Failed to fetch PDF: ${response.status} ${response.statusText}`);
                    }

                    const arrayBuffer = await response.arrayBuffer();
                    const pdfBuffer = Buffer.from(arrayBuffer);
                    console.log(`   ✅ PDF fetched: ${pdfBuffer.length} bytes`);

                    // Generate thumbnail from PDF
                    console.log('   🎨 Generating thumbnail...');
                    const pngBuffer = await pdfFirstPageToPngBuffer(pdfBuffer, 400);
                    console.log(`   ✅ Thumbnail generated: ${pngBuffer.length} bytes`);

                    // Save to Vercel Blob
                    const blobKey = `thumbnails/claim-${claim._id}-${attachment.id}.png`;
                    console.log(`   💾 Saving to blob: ${blobKey}`);
                    const thumbnailUrl = await savePngToVercelBlob(blobKey, pngBuffer, true);
                    console.log(`   ✅ Thumbnail saved: ${thumbnailUrl}`);

                    updatedAttachments.push({
                        ...attachment,
                        thumbnailUrl: thumbnailUrl
                    });
                } catch (e) {
                    console.error(`   ❌ Error processing attachment ${attachment.id}:`, e.message);
                    // Keep the original attachment if thumbnail generation fails
                    updatedAttachments.push(attachment);
                }
            } else {
                // Keep non-auto-generated attachments as-is
                updatedAttachments.push(attachment);
            }
        }

        // Update the claim
        console.log('\n💾 Updating claim with PDF thumbnails...');
        const result = await db.collection('claims').updateOne(
            { _id: claim._id },
            {
                $set: {
                    generalAttachments: updatedAttachments,
                    updatedAt: new Date()
                }
            }
        );

        console.log(`✅ Updated claim: ${result.modifiedCount} documents`);

        console.log('\n📋 Final attachments:');
        updatedAttachments.forEach((att, index) => {
            console.log(`  Attachment ${index + 1}:`);
            console.log(`    - ID: ${att.id}`);
            console.log(`    - Thumbnail: ${att.thumbnailUrl?.substring(0, 80)}...`);
        });

        console.log('\n🎉 PDF thumbnails generated and saved successfully!');

    } catch (e) {
        console.error('❌ Error:', e.message);
        console.error(e.stack);
    } finally {
        process.exit(0);
    }
}

generateAndUpdateThumbnails();


